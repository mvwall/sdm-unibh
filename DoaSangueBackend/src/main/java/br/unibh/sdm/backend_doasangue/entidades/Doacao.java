package br.unibh.sdm.backend_doasangue.entidades;

import java.util.Date;


import com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBAttribute;
import com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBAutoGeneratedKey;
import com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBHashKey;
import com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBTable;


@DynamoDBTable(tableName = "doacao")
public class Doacao {
    private String id;
    private String doador; // Doador associado a esta doação
    private String unidadeSaude; // Unidade de saúde associada à doação
    private Date dataDoacao;
    private double quantidadeLitros;

    /**
     * Construtor da classe Doacao.
     * 
     * @param d1 o doador associado a esta doação
     * @param unidadeSaude a unidade de saúde associada à doação 
     */
    public Doacao(String d1, String unidadeSaude, double quantidadeLitros) {               
        this.doador = d1;
        this.unidadeSaude = unidadeSaude; 
        this.quantidadeLitros = quantidadeLitros;
    }

    public Doacao(){};
    
    /**
     * Obtém o ID da doação.
     * 
     * @return o ID da doação
     */
    @DynamoDBHashKey
    @DynamoDBAutoGeneratedKey
    public String getId() {
        return id;
    }

    /**
     * Define o ID da doação.
     * 
     * @param id o ID da doação
     */
    public void setId(String id) {
        this.id = id;
    }

    /**
     * Obtém o doador associado a esta doação.
     * 
     * @return o doador associado a esta doação
     */
    @DynamoDBAttribute(attributeName = "doador")
    public String getDoador() {
        return doador;
    }

    /**
     * Define o doador associado a esta doação.
     * 
     * @param doador o doador associado a esta doação
     */
    public void setDoador(String doador) {
        this.doador = doador;
    }

    /**
     * Obtém a unidade de saúde associada à doação.
     * 
     * @return a unidade de saúde associada à doação
     */
    public String getUnidadeSaude() {
        return unidadeSaude;
    }

    /**
     * Define a unidade de saúde associada à doação.
     * 
     * @param unidadeSaude a unidade de saúde associada à doação
     */
    public void setUnidadeSaude(String unidadeSaude) {
        this.unidadeSaude = unidadeSaude;
    }

    /**
     * Obtém a data da doação.
     * 
     * @return a data da doação
     */
    @DynamoDBAttribute(attributeName = "DataDoacao")
    public Date getDataDoacao() {
        return dataDoacao;
    }

    /**
     * Define a data da doação.
     * 
     * @param dataDoacao a data da doação
     */
    public void setDataDoacao(Date dataDoacao) {
        this.dataDoacao = dataDoacao;
    }

    /**
     * Obtém a quantidade de litros doada.
     * 
     * @return a quantidade de litros doada
     */
    @DynamoDBAttribute(attributeName = "QuantidadeLitros")
    public double getQuantidadeLitros() {
        return quantidadeLitros;
    }

    /**
     * Define a quantidade de litros doada.
     * 
     * @param quantidadeLitros a quantidade de litros doada
     */
    public void setQuantidadeLitros(double quantidadeLitros) {
        this.quantidadeLitros = quantidadeLitros;
    }

    /**
     * Sobrescreve o método hashCode().
     * 
     * @return o código hash para o objeto
     */
    @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + ((id == null) ? 0 : id.hashCode());
        result = prime * result + ((doador == null) ? 0 : doador.hashCode());
        result = prime * result + ((unidadeSaude == null) ? 0 : unidadeSaude.hashCode());
        result = prime * result + ((dataDoacao == null) ? 0 : dataDoacao.hashCode());
        long temp;
        temp = Double.doubleToLongBits(quantidadeLitros);
        result = prime * result + (int) (temp ^ (temp >>> 32));
        return result;
    }

    /**
     * Sobrescreve o método equals().
     * 
     * @param obj o objeto a ser comparado
     * @return true se os objetos forem iguais, false caso contrário
     */
    @Override
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;
        Doacao other = (Doacao) obj;
        if (id == null) {
            if (other.id != null)
                return false;
        } else if (!id.equals(other.id))
            return false;
        if (doador == null) {
            if (other.doador != null)
                return false;
        } else if (!doador.equals(other.doador))
            return false;
        if (unidadeSaude == null) {
            if (other.unidadeSaude != null)
                return false;
        } else if (!unidadeSaude.equals(other.unidadeSaude))
            return false;
        if (dataDoacao == null) {
            if (other.dataDoacao != null)
                return false;
        } else if (!dataDoacao.equals(other.dataDoacao))
            return false;
        if (Double.doubleToLongBits(quantidadeLitros) != Double.doubleToLongBits(other.quantidadeLitros))
            return false;
        return true;
    }

    /**
     * Sobrescreve o método toString().
     * 
     * @return uma representação em string do objeto
     */
    @Override
    public String toString() {
        return "Doacao [id=" + id + ", doador=" + doador + ", unidadeSaude=" + unidadeSaude + ", dataDoacao="
                + dataDoacao + ", quantidadeLitros=" + quantidadeLitros + "]";
    }

}
